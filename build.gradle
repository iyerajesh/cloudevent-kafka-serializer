plugins {
    id 'org.springframework.boot' version '2.4.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'maven-publish'
    id 'jacoco'
    id 'org.barfuin.gradle.jacocolog' version '1.2.1'
}

group = 'com.xylia.platform.events'
version = '1.0.0'
sourceCompatibility = '11'
targetCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

sourceSets {
    main {
        resources {
            srcDirs("src/main/resources")
        }
    }
}

repositories {
    mavenCentral()
}

bootJar {
    enabled = false;
}

jar {
    enabled = true;
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'

    implementation group: 'io.cloudevents', name: 'cloudevents-api', version: '1.3.0'
    implementation group: 'io.cloudevents', name: 'cloudevents-kafka', version: '1.3.0'

    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.12.1'
    compile 'com.github.java-json-tools:json-schema-validator:2.2.14'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.19.0'

}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }

    repositories {
        mavenLocal()
    }
}

test {
    useJUnitPlatform()
    ignoreFailures(false)
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}

jacocoTestReport {
    group = "Reporting"
    reports {
        xml.enabled(true)
        html.enabled(true)
        xml.destination file("$buildDir/reports/jacoco/test/TEST-XMLReport.xml")
        html.destination file("$buildDir/jaocoHtml")
    }
    executionData(test)
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.4
            }
        }
    }
}

// to run the coverage verification during the build
check.dependsOn jacocoTestCoverageVerification, jacocoTestReport